/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef SCOREFUNCTION_H
#define SCOREFUNCTION_H

#include "Typedefs.hpp"
#include <string>

enum ScorerType
{
	eL1Scorer,
	eBinaryL1Scorer,
	eModifiedBinaryL1Scorer,
	eCorrelationScorer,
	eCosineSimiarlityScorer
};

class ScoreFunction
{
public:

	virtual float operator()( const real_array &, const real_array & ) const = 0;

protected:

	float	LpNorm( const real_array & ref, const real_array & test, int p ) const;
};

class L1Score : public ScoreFunction
{
public:

	virtual float operator()( const real_array &, const real_array & ) const;
};

class Correlation : public ScoreFunction
{
public:

	virtual float operator()( const real_array &, const real_array & ) const;
};

class CosineSimilarity : public ScoreFunction
{
public:

	virtual float operator()( const real_array &, const real_array & ) const;
};

class BinaryClassL1Score : public ScoreFunction
{
public:

	virtual float operator()( const real_array &, const real_array & ) const;

};

class BinaryClassModifiedL1Score : public ScoreFunction
{
public:

	virtual float operator()( const real_array &, const real_array & ) const;

};

class ScoreFunctionFactory
{
public:

	static ScoreFunction * Create( const std::string &inName );
	static ScoreFunction * Create( ScorerType inType );

private:

	ScoreFunctionFactory();
};


#endif // SCOREFUNCTION_H
