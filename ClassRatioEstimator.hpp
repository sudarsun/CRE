/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef CLASSRATIOESTIMATOR_H
#define CLASSRATIOESTIMATOR_H

#include "Matrix.hpp"
#include "Typedefs.hpp"
#include "Data.hpp"
#include "Utils.hpp"
#include "QuadProg.hpp"
#include <vector>

extern const float kCorrelationThreshold_ModifiedBinaryL1;
extern const float kCorrelationThreshold_L1;

enum KernelImplType {
	eNAIVE,
	eNAIVE_THREADED,
	eARMADILLO
};

enum GaussianType {
	eDefault,
	eUnivariateOnly,
	eMultivariateOnly
};

enum ScorerType {
	eL1Scorer,
	eBinaryL1Scorer,
	eModifiedBinaryL1Scorer
};

static float Score(const real_array &ref, const real_array &test, ScorerType type) {
	switch (type) {
		case eBinaryL1Scorer:
			return BinaryL1Score(ref, test);
		case eModifiedBinaryL1Scorer:
			return ModifiedBinaryL1Score(ref, test);
		case eL1Scorer:
		default:
			return L1Score(ref, test);
	}
}

class ClassRatioEstimator {
public:
	ClassRatioEstimator() : mKernels(nullptr), mUseSuperKernels(false) {}

	~ClassRatioEstimator() {
		delete[] mKernels;
	}

	void EnableSuperKernels() {
		mUseSuperKernels = true;
	}

	/// Estimate the bandwidth (weighted variance, width of the gaussian distribution) from the input data matrix.
	[[nodiscard]] double BandwidthSelect(const Matrix &inMatrix) const;

	//void	GetKernels( const Matrix &inA, const Matrix &inB, dense_matrix_array &outKernels, float inBandwidth, bool inMulti, KernelImplType type );
	//void	GetKernels( const Matrix &inA, const Matrix &inB, DenseMatrix &outKernel, float inBandwidth, const real_array &inWts, const std::string &inPrefix );

	void
	GetKernelsv2(const Matrix &inA, const Matrix &inB, DenseMatrix &outKernel, GaussianType inType, float inBandwidth,
				 const weights_t &inWts);

	bool MMD(const DenseMatrix &inY, int inClasses, const DenseMatrix &inKrr, const DenseMatrix &inKre,
			 real_array &outValues, bool &outIsOverfit, bool cache = false);

	bool MMD_2(int inClasses, int_array &dpts, real_array &outValues) const;

	//void	BestKernel( const Data &inTrain, const Data &inEval, real_array &outWeights, ScorerType inType, float inThreshold );
	void BestKernelv2(const Data &inTrain, const Data &inEval, weights_t &outWeights, GaussianType inGaussian,
					  ScorerType inType, float inThreshold);
	//void	BestKernelv3(const Data &inTrain, const Data &inEval, weights_t &outWeights, ScorerType inType, float inThreshold);

	[[nodiscard]] bool isCached() const {
		return mQ.isOK() && mKernels != nullptr;
	}

private:
	[[nodiscard]] bool CheckForOverfit(const DenseMatrix &dm, const double_array &da) const;

	Qdata mQ;
	DenseMatrix *mKernels;
	bool mUseSuperKernels;

};

#endif // CLASSRATIOESTIMATOR_H
