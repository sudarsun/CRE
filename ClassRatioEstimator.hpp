/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef CLASSRATIOESTIMATOR_H
#define CLASSRATIOESTIMATOR_H

#include "Matrix.hpp"
#include "Typedefs.hpp"
#include "Data.hpp"
#include <vector>

enum KernelImplType
{
	eNAIVE,
	eNAIVE_THREADED,
	eARMADILLO
};

class ClassRatioEstimator
{
public:

	/// Estimate the bandwidth (weighted variance, width of the gaussian distribution) from the input data matrix.
	float 	BandwidthSelect( const Matrix &inMatrix ) const;

	void	GetKernels( const Matrix &inA, const Matrix &inB, dense_matrix_array &outKernels, float inBandwidth, bool inMulti, KernelImplType type );

	bool 	MMD( const DenseMatrix &inY, int inClasses, const DenseMatrix &inKrr, const DenseMatrix &inKre, real_array &outValues );

	void	BestKernel( const Data &inTrain, const Data &inEval, weights_t &outWeights );

	real_array ClassProportions( const Matrix &inLabels ) const;
	float 	LpNorm( const real_array &ref, const real_array &test, int p = 2 ) const;
	float 	Correlation( const real_array &ref, const real_array &test ) const;
};

#endif // CLASSRATIOESTIMATOR_H
