/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef __cre_utils_hpp__
#define __cre_utils_hpp__

#include "Typedefs.hpp"
#include "Matrix.hpp"
#include <iostream>
#include <vector>

float StandardDeviation( const real_array &inArray );

real_array StandardDeviation( const Matrix &inMatrix );

real_array StandardDeviation( const Matrix &inMatrix, const int_array &inCols );

float Mean( const real_array &array );

int_array Indices( const int_array &inArray, int inValue );

int_array Indices( const Matrix &inColMatrix, int inValue );

real_array ClassProportions( const Matrix &inLabels );

float 	LpNorm( const real_array &ref, const real_array &test, int p = 2 );

float	L1Score( const real_array &ref, const real_array &test );
float	BinaryL1Score( const real_array &ref, const real_array &test );
float 	ModifiedBinaryL1Score( const real_array &ref, const real_array &test );

float 	Correlation( const real_array &ref, const real_array &test );

float 	Cosine( const real_array &ref, const real_array &test );

std::ostream & operator<<( std::ostream &ioStream, const real_array &array ) ;
std::ostream & operator<<( std::ostream &ioStream, const double_array &array ) ;

real_array & operator += ( real_array &ioArray, const real_array &inArray );

real_array & operator /= ( real_array &ioArray, float scale );
real_array & operator *= ( real_array &ioArray, float scale );

class Scorer
{

public:

	void	Reset(void);
	void	Add( const real_array &inScore );

	real_array	Finale( void );

private:

	std::vector< real_array > mScores;
};

#endif // __cre_utils_hpp__
