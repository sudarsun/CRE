/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef DATA_H
#define DATA_H

#include <string>
#include <vector>
#include <istream>

#include "Matrix.hpp"
#include "Typedefs.hpp"
#include "Utils.hpp"

static const std::string kNullString = "";
struct dataset_t;

typedef std::vector<dataset_t> cvdata_t;
typedef std::vector<double> class_prop_t;
typedef std::vector<class_prop_t> class_props_t;

class Data
{
public:

	static Data * MakeData(const Matrix &inFeatures, const Matrix &inLabels)
	{

	}
	
	Data(const DenseMatrix *inFeatures, const DenseMatrix *inLabels) : mIsShallow(false)
	{
		mFeatures = new DenseMatrix();
		mFeatures->Append(*inFeatures);

		mLabels.Append(*inLabels);
	}

	Data(const double ** inFeatures, int n, int p, const int * inLabels ) : mIsShallow(false)
	{
		mFeatures = new DenseMatrix(n, p);
		mLabels.Resize(n, 1);
		for (int i = 0; i < n; ++i)
		{
			mLabels(i,0) = (double)inLabels[i];
			for (int j = 0; j < p; ++j)
				(*mFeatures)(i,j) = inFeatures[i][j];
		}
	}

	Data(const double * inFeatures, int n, int p, const int * inLabels ) : mIsShallow(false)
	{
		mFeatures = new DenseMatrix(n, p);
		mLabels.Resize(n, 1);
		for (int i = 0; i < n; ++i)
		{
			mLabels(i,0) = (double)inLabels[i];
			for (int j = 0; j < p; ++j)
				(*mFeatures)(i,j) = inFeatures[i*p+j];
		}
	}

	/// default constructor
	Data() : mFeatures(nullptr), mIsShallow(false)
	{}

	/// default destructor
	~Data()
	{
		// deleting nullptr has no effect
		delete mFeatures;
	}

	Data * drawSamples(const class_prop_t &inProp) {
		if (isEmpty()) return nullptr;
	}

	/*
	* Reference of the matlab code for sampling from dirichlet distribution.
	* 
	* function [simplexPoints] = generateSimplexSamples(dimension, samples)
		if (dimension == 2 && samples == 11)
			simplexPoints = [0.01 0.99; 0.1 0.9; 0.2 0.8; 0.3 0.7; 0.4 0.6; 0.5 0.5; 0.6 0.4; 0.7 0.3; 0.8 0.2; 0.9 0.1; 0.99 0.01];
		else
			savedState = rand('state');
			rand('state', 10);
			simplexPoints = diff(sort([zeros(1, samples); rand(dimension - 1, samples); ones(1, samples)]))';
			rand('state', savedState);
		end
	*/
	class_props_t generateSimplexProps(uword n)
	{
		// check if the class is loaded.
		if (isEmpty()) return class_props_t();
		
		// get the number of labels.
		auto nLabels = mLabels.Rows();
	
		if (n == 11 && nLabels == 2)
		{
			class_props_t props(11);
			float vals[][2] = {{0.01, 0.99}, {0.1, 0.9}, {0.2, 0.8}, {0.3, 0.7}, {0.4, 0.6}, {0.5, 0.5}, {0.6, 0.4}, {0.7, 0.3}, {0.8, 0.2}, {0.9, 0.1}, {0.99, 0.01}};
			for (int i =0; i <11;++i) {
				props[i].push_back(vals[i][0]);
				props[i].push_back(vals[i][1]);
			}
			
			return props;
		}

		mat T = trans(diff(sort(join_rows(join_rows(zeros(1, n), randn((uword)nLabels-1, n)), ones(1, n)))));
		class_props_t props(n);
		for (uword i = 0; i < n; ++i) {
			for (uword j = 0; j < nLabels; j++) {
				props[i].push_back(T(i,j));
			}
		}
		
		return props;
	}

	bool isEmpty() const
	{
		return mFeatures == nullptr || mFeatures->Rows() == 0;
	}

	/// assignment operator/mutator
	Data & operator=( const Data & );

	Data & Append( const Data &inData );

	int	minLabel() const
	{
		if ( mLabels.Rows() )
			return (int)mLabels.Min( DenseMatrix::eWholesome )(0,0);

		return INT_MIN;
	}

	int maxLabel() const
	{
		if ( mLabels.Rows() )
			return (int)mLabels.Max( DenseMatrix::eWholesome )(0,0);

		return INT_MAX;
	}

	Data * getLabeled() const;
	Data * getUnlabeled() const;

	/**
	 * @param inMatrix can be a libsvm formatted matrix or a plain dense matrix.
	 */
	bool	Load( const std::string &inMatrix, const std::string &inLabelColumnMatrix );
	bool 	Load( std::istream &inMatrix, std::istream &inLabelColumnMatrix );
	void	Load( const std::string &inName );
	bool 	Save( const std::string &outFile ) const;


	/// Split the data into test and train based on a split percentage.
	void	Split( float inPercent, Data &outSplitA, Data &outSplitB ) const;

	/// Perform random permutation on the Dataset.
	void	RandomPermute( Data &outPermuted ) const;

	/// Generate dataset tuples < train,test > for performing n-fold Cross Validation.
	void	getCrossValidationDataSet(int &ioFolds, cvdata_t &outCVData);

	static void SaveCrossValidationDataSet( const cvdata_t &inCVData, const std::string &inName );
	static void	LoadCrossValidationDataSet( const std::string &inName, cvdata_t &outCVData );

	const Matrix & 		features() const;
	const Matrix & 		labels() const;

	real_array 	classProp() const
	{
		return ClassProportions(mLabels);
	}

	real_array	classProp(const int_array &ids) const
	{
		return ClassProportions(mLabels, ids);
	}

	Matrix & features()
	{
		return *mFeatures;
	}

	DenseMatrix & labels()
	{
		return mLabels;
	}

	int size() const {
		return isEmpty() ? 0 : mFeatures->mRows;
	}

	void _print() const;

private:

	Matrix		*mFeatures;
	DenseMatrix mLabels;
	bool 		mIsShallow;
};

struct dataset_t
{
	Data train;
	Data test;

};

#endif // DATA_H
