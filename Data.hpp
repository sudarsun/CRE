/*
 * Boost Software License - Version 1.0 - August 17th, 2003
 *
 * Permission is hereby granted, free of charge, to any person or organization
 * obtaining a copy of the software and accompanying documentation covered by
 * this license (the "Software") to use, reproduce, display, distribute,
 * execute, and transmit the Software, and to prepare derivative works of the
 * Software, and to permit third-parties to whom the Software is furnished to
 * do so, all subject to the following:
 *
 * The copyright notices in the Software and this entire statement, including
 * the above license grant, this restriction and the following disclaimer,
 * must be included in all copies of the Software, in whole or in part, and
 * all derivative works of the Software, unless such copies or derivative
 * works are solely in the form of machine-executable object code generated by
 * a source language processor.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
 * SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
 * FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 *
 */

#ifndef DATA_H
#define DATA_H

#include <string>
#include <vector>
#include <istream>

#include "Matrix.hpp"
#include "Typedefs.hpp"

static const std::string kNullString = "";
struct dataset_t;

typedef std::vector<dataset_t> cvdata_t;

class Data
{
public:

	/// default constructor
	Data() : mFeatures(NULL), mIsShallow(false)
	{}

	/// default destructor
	~Data()
	{
		if ( mFeatures )
			delete mFeatures;
	}

	/// assignment operator/mutator
	Data & operator=( const Data & );

	Data & Append( const Data &inData );

	int	MinLabel( void ) const
	{
		if ( mLabels.Rows() )
			return mLabels.Min( DenseMatrix::eWholesome )(0,0);

		return INT_MIN;
	}

	int MaxLabel( void ) const
	{
		if ( mLabels.Rows() )
			return mLabels.Max( DenseMatrix::eWholesome )(0,0);

		return INT_MAX;
	}

	/**
	 * @param inMatrix can be a libsvm formatted matrix or a plain dense matrix.
	 */
	bool	Load( const std::string &inMatrix, const std::string &inLabelColumnMatrix );
	bool 	Load( std::istream &inMatrix, std::istream &inLabelColumnMatrix );
	void	Load( const std::string &inName );
	bool 	Save( const std::string &outFile ) const;


	/// Split the data into test and train based on a split percentage.
	void	Split( float inPercent, Data &outSplitA, Data &outSplitB ) const;

	/// Perform random permutation on the Dataset.
	void	RandomPermute( Data &outPermuted ) const;

	bool 	Empty( void ) const
	{
		if ( !mFeatures or mFeatures->Rows()==0 )
			return true;

		return false;
	}

	/// Generate dataset tuples < train,test > for performing n-fold Cross Validation.
	void	GetCrossValidationDataSet( int &ioFolds, cvdata_t &outCVData );

	static void SaveCrossValidationDataSet( const cvdata_t &inCVData, const std::string &inName );
	static void	LoadCrossValidationDataSet( const std::string &inName, cvdata_t &outCVData );

	const Matrix & 		Features( void ) const;
	const Matrix & 		Labels( void ) const;

	Matrix & Features( void )
	{
		return *mFeatures;
	}

	DenseMatrix & Labels( void )
	{
		return mLabels;
	}


private:

	Matrix		*mFeatures;
	DenseMatrix mLabels;
	bool 		mIsShallow;
};

struct dataset_t
{
	Data train;
	Data test;

};

#endif // DATA_H
